import java.lang.Math; 
import java.util.Arrays;
import java.io.*;
import javax.sound.sampled.*;

// one class needs to have a main() method
public class HelloWorld
{
  // arguments are passed using the text field below this editor
  public static void main(String[] args)
  {
    double[] ideal = {0.014479,0.026049,0.03242,0.043263,0.049052,0.053679,0.060251,0.065504,0.069702,0.073057,0.075737,0.07788,0.079592,0.078085,0.079756,0.11847,0.11203,0.10976,0.10219,0.096147,0.10282,0.096645,0.094588,0.090069,0.089333,0.088745,0.088275,0.087899,0.084723,0.085061,0.082455,0.080373,0.08446,0.081975,0.079989,0.078402,0.077133,0.099125,0.09657,0.091653,0.087723,0.084582,0.084948,0.088116,0.087772,0.087498,0.087278,0.087103,0.086962,0.08685,0.092512,0.091285,0.090305,0.086646,0.12398,0.11643,0.1104,0.10846,0.10403,0.11199,0.10685,0.10275,0.096587,0.091667,0.09061,0.084014,0.078743,0.077406,0.079213,0.077782,0.076638,0.0786,0.077292,0.076246,0.066784,0.039093,0.0025852,-0.081227,-0.21434,-0.37536,-0.52992,-0.67069,-0.77744,-0.84836,-0.93093,-0.97102,-0.99732,-1.004,-1.0265,-1.0647,-1.0664,-1.0592,-1.0591,-0.9757,-0.94642,-0.90001,-0.8543,-0.80052,-0.74316,-0.70594,-0.6762,-0.65531,-0.63574,-0.62873,-0.62888,-0.629,-0.64347,-0.65503,-0.6614,-0.67512,-0.69758,-0.72991,-0.72699,-0.73041,-0.72451,-0.67954,-0.62635,-0.56946,-0.50962,-0.43305,-0.35747,-0.28557,-0.22236,-0.16322,-0.11021,-0.070721,-0.042038,-0.016241,0.0014997,0.015677,0.027007,0.036061,0.086431,0.08355,0.081248,0.082284,0.083111,0.086648,0.083724,0.084262,0.081817,0.079862,0.081176,0.082226,0.083066,0.083736,0.084272,0.0847,0.082167,0.085894,0.085996,0.083203,0.08097,0.082061,0.097312,0.092245,0.088197,0.082085,0.082953,0.077895,0.070977,0.0712,0.077129,0.076117,0.075307,0.077536,0.076442,0.075567,0.077744,0.076607,0.078575,0.12616,0.12105,0.11697,0.11658,0.10764,0.10625,0.099391,0.093907,0.095275,0.096369,0.088617,0.082421,0.086097,0.089034,0.08563,0.08291,0.080736,0.08475,0.085083,0.085348,0.08556,0.08573,0.14913,0.13366,0.11841,0.11774,0.11144,0.10641,0.099519,0.096885,0.091905,0.087924,0.081868,0.079903,0.084085,0.081675,0.082625,0.080508,0.081692,0.12865,0.12016,0.11338,0.11084,0.10881,0.11006,0.10243,0.093462,0.089169,0.085738,0.077245,0.070458,0.067909,0.062997,0.064823,0.066282,0.067448,0.071255,0.068547,0.069258,0.069826,0.07028,0.090772,0.081268,0.079424,0.07795,0.073897,0.076409,0.081292,0.079443,0.07509,0.077363,0.076303,0.078332,0.079953,0.078373,0.082862,0.080698,0.078968,0.11497};    
    
    double[] patient = {0.014479,0.026049,0.035296,0.042685,0.051466,0.055608,0.056042,0.056389,0.065293,0.066658,0.070624,0.073793,0.076326,0.092728,0.094334,0.092741,0.071339,0.054236,0.040567,0.029644,0.020915,0.011063,0.0031905,-0.0031012,-0.0081291,-0.0092716,-0.01306,-0.016088,-0.018508,-0.017566,0.017695,0.031495,0.042523,0.051337,0.05838,0.06976,0.070227,0.073476,0.076073,0.072397,0.072335,0.072285,0.072245,0.075089,0.074486,0.074004,0.070743,0.071013,0.065478,0.066805,0.062115,0.058366,0.072625,0.066765,0.062083,0.058341,0.052475,0.044911,0.035991,0.028863,0.020291,0.01344,-0.00066134,-0.009055,-0.015763,-0.021123,-0.022532,-0.026533,-0.032606,0.0056755,0.013263,0.033704,0.055792,0.08207,0.088691,0.082481,0.083269,0.014884,-0.03114,-0.099551,-0.1571,-0.23184,-0.2887,-0.36289,-0.38768,-0.37873,-0.40033,-0.42335,-0.32096,-0.37142,-0.35999,-0.29621,-0.31138,-0.24299,-0.19696,-0.17168,-0.10834,-0.12674,-0.10693,-0.050849,-0.017531,-0.0024068,0.0010526,-0.001934,0.015809,0.027112,0.024643,0.042799,0.048681,0.036128,0.046226,0.037042,0.029703,0.020962,0.039857,0.049206,0.056677,0.045394,0.053631,0.045835,0.039605,0.014497,0.026064,0.015178,0.026608,0.018489,0.023503,0.021758,0.017489,0.022703,0.047,0.046288,0.051469,0.046983,0.04915,0.050881,0.058016,0.060842,0.065976,0.070079,0.070482,0.070805,0.073938,0.076442,0.072691,0.07257,0.072473,0.10978,0.10508,0.098456,0.10179,0.095822,0.10543,0.10736,0.10028,0.094615,0.087215,0.087052,0.089798,0.08624,0.086273,0.080548,0.081725,0.082664,0.083416,0.086892,0.083918,0.078666,0.077345,0.096418,0.091531,0.087626,0.081629,0.079713,0.083932,0.078678,0.077354,0.079172,0.080624,0.07891,0.080415,0.081618,0.079704,0.083925,0.081547,0.085398,0.13736,0.12713,0.11895,0.10954,0.10201,0.10175,0.098672,0.093332,0.089065,0.088531,0.088104,0.087762,0.08749,0.087272,0.084222,0.08466,0.079259,0.08357,0.081264,0.07942,0.077948,0.07677,0.10171,0.092885,0.091583,0.087667,0.087414,0.087211,0.087049,0.084044,0.081642,0.082599,0.083363,0.083974,0.087338,0.084275,0.084702,0.082169,0.080144,0.12741,0.11917,0.11547,0.10388,0.10325,0.10561,0.09888,0.096375,0.094372,0.092772,0.085742,0.080123,0.078509,0.077219,0.076189,0.075365,0.077582,0.08223,0.080192,0.075689,0.077841,0.079561,0.10106,0.09812,0.092892};

    double[] crosscorr = OtherClass.xcorr(ideal,patient);
    Arrays.toString(crosscorr);
    //System.out.println(Arrays.toString(crosscorr));
    
    //SCORE COMPUTATION (out of 100) **************************
    // 26.9577 = constant 
    
    double score = (double)crosscorr[250]/ 26.9577 * 100;


    Double score_print = new Double(score);
    System.out.println(score_print);
  }
}

public class OtherClass
{
  public static double[] xcorr(double[] a, double[] b)
    {
        int len = a.length;
        if(b.length > a.length)
            len = b.length;

        return xcorr(a, b, len-1);
    }

    public static double[] xcorr(double[] a)
    {
        return xcorr(a, a);
    }

    public static double[] xcorr(double[] a, double[] b, int maxlag)
    {
        double[] y = new double[2*maxlag+1];
        Arrays.fill(y, 0);
        
        for(int lag = b.length-1, idx = maxlag-b.length+1; 
            lag > -a.length; lag--, idx++)
        {
            if(idx < 0)
                continue;
            
            if(idx >= y.length)
                break;
            
            int start = 0;
            // we can't start past the left end of b
            if(lag < 0) 
            {
                //System.out.println("b");
                start = -lag;
            }

            int end = a.length-1;
            // we can't go past the right end of b
            if(end > b.length-lag-1)
            {
                end = b.length-lag-1;
                //System.out.println("a "+end);
            }

            //System.out.println("lag = " + lag +": "+ start+" to " + end+"   idx = "+idx);
            for(int n = start; n <= end; n++)
            {
                //System.out.println("  bi = " + (lag+n) + ", ai = " + n); 
                y[idx] += a[n]*b[lag+n];
            }
            //System.out.println(y[idx]);
        }

        return(y);
    }
}